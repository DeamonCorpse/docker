#----------------- TELEGRAF CONFIG FILE V 1.0 -----------------#
# Located at /home/docker/persistent-storage/telegraf/telegraf-config.conf
#
# Telegraf Configuration:
# Use 'telegraf -config telegraf.conf -test' to see what metrics a config
# file would generate.
#
# Environment variables can be used anywhere in this config file, simply surround
# them with ${}. For strings the variable must be within quotes (ie, "${STR_VAR}"),
# for numbers and booleans they should be plain (ie, ${INT_VAR}, ${BOOL_VAR})
#
# Global tags can be specified here in key="value" format.
#[global_tags]
## Environment variables can be used as tags, and throughout the config file
# user = "$USER"
#
# VERSION HISTORY
# V 1.0     Initial
#--------------------------------------------------------------#

#----- TELEGRAF AGENT
[agent]
  interval = "5s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "5s"
  flush_jitter = "0s"
  precision = ""
  debug = false
  quiet = false
  logfile = ""
  hostname = "$HOSTNAME"
  omit_hostname = false

#----- OUTPUT PLUGINS
[[outputs.influxdb]]
  urls = ["http://influxdb:8086"]
  database = "test"
  username = ""
  password = ""
  retention_policy = ""
  write_consistency = "any"
  timeout = "5s"

#----- INPUT PLUGINS
[[inputs.http_listener]]
  service_address = ":8186"

# KERNEL statistics from /proc/stat & /proc/vmstat
[[inputs.kernel]]
[[inputs.kernel_vmstat]]

# Read metrics about CPU usage
[[inputs.cpu]]
percpu = true
totalcpu = true
collect_cpu_time = false
report_active = false

# Read metrics about DISK usage by mount point
fielddrop = [ "inodes*" ]
mount_points=["/"]
[[inputs.disk]]
ignore_fs = ["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs"]

# Read metrics about DISK IO by device
[[inputs.diskio]]

# Read metrics about RAM usage
[[inputs.mem]]

# Get the number of PROCESSES and group them by status
[[inputs.processes]]

# Read metrics about SWAP file usage
[[inputs.swap]]

# Read metrics about SYSTEM load & uptime
[[inputs.system]]
fielddrop = ["uptime_format"]

# Gather metrics about NETWORK interfaces
[[inputs.net]]
interfaces = ["eth*", "enp0s[0-1]", "lo"]
ignore_protocol_stats = false

# Collect statistics about itself
[[inputs.internal]]
collect_memstats = true

# DOCKER metrics from docker socket api
[[inputs.docker]]
endpoint = "unix:///var/run/docker.sock"
container_names = []
name_suffix = "_docker"

# Stream a log file
#[[inputs.tail]]
  ## Standard unix glob matching rules, but with the addition of ** as a "super asterisk"
  ##   "/var/log/**.log"  -> recursively find all .log files in /var/log
  ##   "/var/log/*/*.log" -> find all .log files with a parent dir in /var/log
#files = ["/var/log/**.log"]
#from_beginning = false
  ## Whether file is a named pipe
#pipe = false
  ## Method to watch for file updates, "inotify" or "poll".
#watch_method = "inotify"
## Data format.
  ## More about them here about data formats:
  ## https://github.com/influxdata/telegraf/blob/master/docs/DATA_FORMATS_INPUT.md
#data_format = "grok"

# Grok Configuration Options
## This is a list of patterns to check the given log file(s) for.
  ## The most efficient configuration is to have one pattern.
  ## Other common built-in patterns are:
  ##   %{COMMON_LOG_FORMAT}   (plain apache & nginx access logs)
  ##   %{COMBINED_LOG_FORMAT} (access logs + referrer & agent)
#grok_patterns = ["%{COMBINED_LOG_FORMAT}"]

  ## Full path(s) to custom pattern files.
#grok_custom_pattern_files = []

  ## Custom patterns can also be defined here. Put one pattern per line.
#grok_custom_patterns = '''

  ## Allows you to provide an override for timestamps that don't already include an offset
#grok_timezone = "Canada/Eastern"

  ## When set to "disable" timestamp will not incremented if there is a duplicate.
#grok_unique_timestamp = "auto"