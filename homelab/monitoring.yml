services:
  glances:
    image: nicolargo/glances:${GLANCES_TAG:-alpine-latest}
    container_name: Glances
    hostname: glances
    read_only: false
    privileged: false
    pid: host
    security_opt:
      - no-new-privileges:true
    deploy:
      restart_policy:
        condition: unless-stopped
        delay: 5s
        window: 120s
      resources:
        limits:
          cpus: '0.15'
          memory: 50M
        reservations:
          cpus: '0.05'
          memory: 30M
    environment:
      - "GLANCES_OPT=-w"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /etc/localtime:/etc/localtime:ro
      - $USERDIR/glances/glances.conf:/glances/conf/glances.conf:rw
    labels:
      - autoheal:true
    ports:
      - ${GLANCES_PORTS:-61208-61209}:61208-61209
    networks:
      - docker
    logging:
      options:
        #syslog-address: "tcp://192.168.68.62:514"
        max-size: 50m
        max-file: 10

  scrutiny:
    image: ghcr.io/analogj/scrutiny:${SCRUTINY_TAG:-master-omnibus}
    container_name: Scrutiny
    hostname: scrutiny
    read_only: false
    privileged: true
    security_opt:
      - no-new-privileges:true
    cap_add:
      - SYS_ADMIN
      - SYS_RAWIO
    deploy:
      restart_policy:
        condition: unless-stopped
        delay: 5s
        window: 120s
      resources:
        limits:
          cpus: '0.15'
          memory: 100M
        reservations:
          cpus: '0.05'
          memory: 80M
    environment:
      - TZ=$TZ
    volumes:
      - /run/udev:/run/udev:ro
      - /dev/disk:/dev/disk:ro
      - $USERDIR/scrutiny:/opt/scrutiny/config:rw
      - $USERDIR/scrutiny/influxdb:/opt/scrutiny/influxdb:rw
    labels:
      - autoheal:true
    ports:
      - ${SCRUTINY_UI_PORT:-8080}:8080
      - ${SCRUTINY_DB_PORT:-8086}:8086
    networks:
      - docker
    logging:
      options:
        #syslog-address: "tcp://192.168.68.62:514"
        max-size: 50m
        max-file: 10

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:${CADVISOR_TAG:-latest}
    container_name: cAdvisor
    hostname: cadvisor
    read_only: true
    privileged: true
    security_opt:
      - no-new-privileges:true
    deploy:
      restart_policy:
        condition: unless-stopped
        delay: 5s
        window: 120s
      resources:
        limits:
          cpus: '0.2'
          memory: 50M
        reservations:
          cpus: '0.02'
          memory: 20M
    environment:
      - TZ=$TZ
      - HOST_CONTAINERNAME=cAdvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    labels:
      - autoheal:true
    ports:
      - ${CADVISOR_UI_PORT:-8080}:8080
    networks:
      - docker
    logging:
      options:
        #syslog-address: "tcp://192.168.68.62:514"
        max-size: 50m
        max-file: 10

#----- GRAFANA / LOKI / PROMTAIL
  Grafana:
    image: grafana/grafana-oss:${GRAFANA_TAG:-latest-ubuntu}
    container_name: Grafana
    hostname: grafana
    read_only: false
    privileged: false
    #init: true
    #cap_drop:
      #- ALL
    security_opt:
      - no-new-privileges:true
    user: $UID
    deploy:
      restart_policy:
        condition: unless-stopped
        delay: 5s
        window: 120s
      resources:
        limits:
          cpus: '2.0'
          memory: 300M
        reservations:
          cpus: '1.0'
          memory: 255M
    environment:
      - GF_DEFAULT_INSTANCE_NAME=Grafana
      - GF_INSTALL_PLUGINS=${GRAFANA_PLUGINS}
      - GF_PLUGIN_GRAFANA_IMAGE_RENDERER_RENDERING_IGNORE_HTTPS_ERRORS=true
      - GF_FEATURE_TOGGLES_ENABLE=newNavigation
    volumes:
      - $USERDIR/grafana:/var/lib/grafana:rw
      - $USERDIR/grafana/plugins:/var/lib/grafana/plugins:rw
      - $LOGDIR/grafana:/var/log/grafana:rw
    #tmpfs:
      #- /tmp
    ports:
      - ${GRAFANA_PORT:-3000}:3000
    networks:
      - monitoring
      - docker
    logging:
      options:
        #syslog-address: "tcp://192.168.68.62:514"
        max-size: 50m
        max-file: 10
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5

  Loki:
    image: grafana/loki:${LOKI_TAG:-latest}
    container_name: Loki
    hostname: loki
    read_only: false
    privileged: false
    #init: true
    #cap_drop:
      #- ALL
    security_opt:
      - no-new-privileges:true
    command: "-config.file=/etc/loki/loki-config.yml -target=read"
    deploy:
      restart_policy:
        condition: unless-stopped
        delay: 5s
        window: 120s
      resources:
        limits:
          cpus: '0.5'
          memory: 24M
        reservations:
          cpus: '0.25'
          memory: 10M
    environment:
      - user=${UID:-1000}
    volumes:
      - $USERDIR/loki:/etc/loki:rw
      - $USERDIR/loki/loki-config.yml:/etc/loki/loki-config.yml:ro
    ports:
      - ${LOKI_PORT:-3100}:3100
    networks:
      - monitoring
    logging:
      options:
        #syslog-address: "tcp://192.168.68.62:514"
        max-size: 50m
        max-file: 10
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5

  Promtail:
    image: grafana/promtail:${PROMTAIL_TAG:-latest}
    container_name: Promtail
    hostname: promtail
    read_only: false
    privileged: false
    #init: true
    #cap_drop:
      #- ALL
    security_opt:
      - no-new-privileges:true
    command: -config.file=/etc/promtail/promtail-config.yml
    deploy:
      restart_policy:
        condition: unless-stopped
        delay: 5s
        window: 120s
      resources:
        limits:
          cpus: '0.5'
          memory: 50M
        reservations:
          cpus: '0.25'
          memory: 24M
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - $USERDIR/promtail:/etc/promtail:rw
      - $USERDIR/promtail/promtail-config.yml:/etc/promtail/promtail-config.yml:ro
      - $LOGDIR:/logs:ro
      - /var/log:/var/log:ro
    networks:
      - monitoring


#----------------- NETWORKING
networks:
  docker:
    name: $DOCKER_NET
    external: true
  monitoring:
    name: $MONITOR_NET
    external: false
