########################################################################################
#
# This compose file runs every service separately without any reverse proxy or http
# server to serve user uploaded files. It is intended as a starting point for people
# who want to use their own reverse proxy and run Baserow with one service per
# container. The web-frontend service is available by default at http://localhost:3000
# and the backend service is available by default at http://localhost:8000 .
#
# To use this file you need to:
#   1. Set the PUBLIC_BACKEND_URL to the URL that the user's browser can access the
#      backend service on.
#   2. Set the PUBLIC_WEB_FRONTEND_URL to the URL that the user's browser can access the
#      web-frontend service on.
#   3. Host the media files in the media volume on a HTTP server and set the MEDIA_URL
#      to the URL the user's browser can access the files on.
#   4. Ensure requests sent to the backend in /ws path are upgraded to websocket
#      connections.
#
# See the following guides for more details and example configurations:
#   1. https://baserow.io/docs/installation%2Finstall-behind-nginx
#   2. https://baserow.io/docs/installation%2Finstall-behind-apache
#
# Also More documentation can be found in:
# https://baserow.io/docs/installation%2Finstall-with-docker-compose
#
########################################################################################

# See https://baserow.io/docs/installation%2Fconfiguration for more details on these
# backend environment variables, their defaults if left blank etc.
x-backend-variables: &backend-variables
  # Most users should only need to set these first four variables.
  SECRET_KEY: ${BR_SKEY}
  BASEROW_JWT_SIGNING_KEY: ${BR_JWT_KEY}
  DATABASE_PASSWORD: ${PG_DB_PW}
  REDIS_PASSWORD: ${REDIS_PW}

#  PUBLIC_BACKEND_URL: ${PUBLIC_BACKEND_URL-http://localhost:8000}
#  PUBLIC_WEB_FRONTEND_URL: ${PUBLIC_WEB_FRONTEND_URL-http://localhost:3000}

  # Set these if you want to use an external postgres instead of the db service below.
  #DATABASE_USER: ${PG_USER:-baserow}
  #DATABASE_NAME: ${PG_DB_NAME:-baserow}
  #DATABASE_HOST:
  #DATABASE_PORT:
  #DATABASE_URL:

  # Set these if you want to use an external redis instead of the redis service below.
  #REDIS_HOST:
  #REDIS_PORT:
  #REDIS_PROTOCOL:
  #REDIS_URL:
  #REDIS_USER:

  # Set these to enable Baserow to send emails.
  #EMAIL_SMTP:
  #EMAIL_SMTP_HOST:
  #EMAIL_SMTP_PORT:
  #EMAIL_SMTP_USE_TLS:
  #EMAIL_SMTP_USER:
  #EMAIL_SMTP_PASSWORD:
  #FROM_EMAIL:

    # Misc settings see https://baserow.io/docs/installation%2Fconfiguration for info
  #BASEROW_AMOUNT_OF_WORKERS:
  #BASEROW_ROW_PAGE_SIZE_LIMIT:
  #BATCH_ROWS_SIZE_LIMIT:
  #INITIAL_TABLE_DATA_LIMIT:
  #BASEROW_FILE_UPLOAD_SIZE_LIMIT_MB:

  #BASEROW_EXTRA_ALLOWED_HOSTS:
  #ADDITIONAL_APPS:
  #BASEROW_PLUGIN_GIT_REPOS:
  #BASEROW_PLUGIN_URLS:

  #BASEROW_ENABLE_SECURE_PROXY_SSL_HEADER:
  #MIGRATE_ON_STARTUP: ${MIGRATE_ON_STARTUP:-true}
  #SYNC_TEMPLATES_ON_STARTUP: ${SYNC_TEMPLATES_ON_STARTUP:-true}
  #DONT_UPDATE_FORMULAS_AFTER_MIGRATION:
  #BASEROW_TRIGGER_SYNC_TEMPLATES_AFTER_MIGRATION:
  #BASEROW_SYNC_TEMPLATES_TIME_LIMIT:

  #BASEROW_BACKEND_DEBUG:
  #BASEROW_BACKEND_LOG_LEVEL:
  #FEATURE_FLAGS:
  #BASEROW_ENABLE_OTEL:
  #BASEROW_DEPLOYMENT_ENV:
  #OTEL_EXPORTER_OTLP_ENDPOINT:
  #OTEL_RESOURCE_ATTRIBUTES:

  #PRIVATE_BACKEND_URL: http://backend:${BR_BE_PORT:-8000}
  #BASEROW_PUBLIC_URL: http://web-frontend:${BR_FE_PORT:-3000}
  #MEDIA_URL:
  #MEDIA_ROOT:

  #BASEROW_AIRTABLE_IMPORT_SOFT_TIME_LIMIT:
  #HOURS_UNTIL_TRASH_PERMANENTLY_DELETED:
  #OLD_ACTION_CLEANUP_INTERVAL_MINUTES:
  #MINUTES_UNTIL_ACTION_CLEANED_UP:
  #BASEROW_GROUP_STORAGE_USAGE_QUEUE:
  #DISABLE_ANONYMOUS_PUBLIC_VIEW_WS_CONNECTIONS:
  #BASEROW_WAIT_INSTEAD_OF_409_CONFLICT_ERROR:
  #BASEROW_FULL_HEALTHCHECKS:
  #BASEROW_DISABLE_MODEL_CACHE:
  #BASEROW_PLUGIN_DIR:
  #BASEROW_JOB_EXPIRATION_TIME_LIMIT:
  #BASEROW_JOB_CLEANUP_INTERVAL_MINUTES:
  #BASEROW_MAX_ROW_REPORT_ERROR_COUNT:
  #BASEROW_JOB_SOFT_TIME_LIMIT:
  #BASEROW_FRONTEND_JOBS_POLLING_TIMEOUT_MS:
  #BASEROW_INITIAL_CREATE_SYNC_TABLE_DATA_LIMIT:
  #BASEROW_WEBHOOKS_ALLOW_PRIVATE_ADDRESS:
  #BASEROW_WEBHOOKS_IP_BLACKLIST:
  #BASEROW_WEBHOOKS_IP_WHITELIST:
  #BASEROW_WEBHOOKS_URL_REGEX_BLACKLIST:
  #BASEROW_WEBHOOKS_URL_CHECK_TIMEOUT_SECS:
  #BASEROW_WEBHOOKS_MAX_CONSECUTIVE_TRIGGER_FAILURES:
  #BASEROW_WEBHOOKS_MAX_RETRIES_PER_CALL:
  #BASEROW_WEBHOOKS_MAX_PER_TABLE:
  #BASEROW_WEBHOOKS_MAX_CALL_LOG_ENTRIES:
  #BASEROW_WEBHOOKS_REQUEST_TIMEOUT_SECONDS:
  #BASEROW_ENTERPRISE_AUDIT_LOG_CLEANUP_INTERVAL_MINUTES:
  #BASEROW_ENTERPRISE_AUDIT_LOG_RETENTION_DAYS:
  #BASEROW_ALLOW_MULTIPLE_SSO_PROVIDERS_FOR_SAME_ACCOUNT:
  #BASEROW_ROW_COUNT_JOB_CRONTAB:
  #BASEROW_STORAGE_USAGE_JOB_CRONTAB:
  #BASEROW_SEAT_USAGE_JOB_CRONTAB:
  #BASEROW_PERIODIC_FIELD_UPDATE_CRONTAB:
  #BASEROW_PERIODIC_FIELD_UPDATE_TIMEOUT_MINUTES:
  #BASEROW_PERIODIC_FIELD_UPDATE_QUEUE_NAME:

services:
  backend:
    image: baserow/backend:${BR_BE_TAG:-1.16.0}
    container_name: Baserow-Backend
    hostname: baserowbackend
    restart: unless-stopped
    read_only: false
    privileged: false
    security_opt:
      - no-new-privileges:true
    environment:
      <<: *backend-variables
    ports:
      - ${BR_BE_PORT:-8000}:8000
    volumes:
      - $USERDIR/baserow/backend:/baserow/media:rw
    labels:
      - autoheal:true
    networks:
      - baserow
      - docker
    depends_on:
      - db
      - redis

  web-frontend:
    image: baserow/web-frontend:${BR_FE_TAG:-1.16.0}
    container_name: Baserow-Frontend
    hostname: baserowfrontend
    restart: unless-stopped
    read_only: false
    privileged: false
    security_opt:
      - no-new-privileges:true
    environment:
      - BASEROW_PUBLIC_URL=http://web-frontend:${BR_FE_PORT:-3000}
      - PRIVATE_BACKEND_URL=http://backend:${BR_BE_PORT:-8000}
      - BASEROW_DISABLE_PUBLIC_URL_CHECK=0
      - BASEROW_ACCESS_TOKEN_LIFETIME_MINUTES=30
      - BASEROW_REFRESH_TOKEN_LIFETIME_HOURS=168
      - BASEROW_JWT_SIGNING_KEY=${BR_JWT_KEY}
      - BASEROW_MAX_IMPORT_FILE_SIZE_MB=256
      - BASEROW_DISABLE_GOOGLE_DOCS_FILE_PREVIEW=0
      - HOURS_UNTIL_TRASH_PERMANENTLY_DELETED=336
    labels:
      - autoheal:true
    ports:
      - ${BR_FE_PORT:-3000}:3000
    networks:
      - baserow
      - docker
    depends_on:
      - backend

  celery:
    image: baserow/backend:${BR_BE_TAG:-1.16.0}
    container_name: Baserow-Celery
    hostname: baserowcelery
    restart: unless-stopped
    read_only: false
    privileged: false
    security_opt:
      - no-new-privileges:true
    command: celery-worker
    environment:
      <<: *backend-variables
    volumes:
      - $USERDIR/baserow/backend:/baserow/media:rw
    # The backend image's baked in healthcheck defaults to the django healthcheck
    # override it to the celery one here.
    healthcheck:
      test: [ "CMD-SHELL", "/baserow/backend/docker/docker-entrypoint.sh celery-worker-healthcheck" ]
    depends_on:
      - backend
    networks:
      - baserow

  celery-export-worker:
    image: baserow/backend:${BR_BE_TAG:-1.16.0}
    container_name: Baserow-Celery-Export
    hostname: baserowceleryexport
    restart: unless-stopped
    read_only: false
    privileged: false
    security_opt:
      - no-new-privileges:true
    command: celery-exportworker
    environment:
      <<: *backend-variables
    # The backend image's baked in healthcheck defaults to the django healthcheck
    # override it to the celery one here.
    volumes:
      - $USERDIR/baserow/backend:/baserow/media:rw
    labels:
      - autoheal:true
    healthcheck:
      test: [ "CMD-SHELL", "/baserow/backend/docker/docker-entrypoint.sh celery-exportworker-healthcheck" ]
    networks:
      - baserow
    depends_on:
      - backend

  celery-beat-worker:
    image: baserow/backend:${BR_BE_TAG:-1.16.0}
    container_name: Baserow-Celery-Beat
    hostname: baserowcelerybeat
    restart: unless-stopped
    read_only: false
    privileged: false
    security_opt:
      - no-new-privileges:true
    command: celery-beat
    environment:
      <<: *backend-variables
    # See https://github.com/sibson/redbeat/issues/129#issuecomment-1057478237
    stop_signal: SIGQUIT
    volumes:
      - $USERDIR/baserow/backend:/baserow/media:rw
    labels:
      - autoheal:true
    networks:
      - baserow
    depends_on:
      - backend

  db:
    image: postgres:${PG_TAG:-11}
    container_name: Baserow-DB
    hostname: baserowdb
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${PG_USER}
      - POSTGRES_PASSWORD=${PG_DB_PW}
      - POSTGRES_DB=${PG_DB_NAME}
    volumes:
      - $USERDIR/baserow/db:/var/lib/postgresql/data:rw
    labels:
      - autoheal:true
    networks:
      - baserow
    healthcheck:
      test: [ "CMD-SHELL", "su postgres -c \"pg_isready -U ${PG_USER}\"" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:{REDIS_TAG:-6}
    container_name: Baserow-Redis
    hostname: baserowredis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PW}
    labels:
      - autoheal:true
    networks:
      - baserow
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]

  # By default, the media volume will be owned by root on startup. Ensure it is owned by
  # the same user that django is running as, so it can write user files.
  volume-permissions-fixer:
    image: bash:${BASH_TAG:-4.4}
    command: chown 9999:9999 -R /baserow/media
    volumes:
      - $USERDIR/baserow/backend:/baserow/media:rw
    networks:
      - baserow

#----------------- NETWORKING
networks:
  docker:
    name: $DOCKER_NET
    external: true
  baserow:
    name: $BASEROW_NET
    external: false
